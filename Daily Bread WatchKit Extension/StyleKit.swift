//
//  StyleKit.swift
//  Grocery
//
//  Created by James Robert on 1/13/15.
//  Copyright (c) 2015 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class StyleKit : NSObject {

    //// Cache

    private struct Cache {
        static var mainColor: UIColor = UIColor(red: 1.000, green: 0.566, blue: 0.000, alpha: 1.000)
        static var mainColorLight: UIColor = StyleKit.color.colorWithAlpha(1)
        static var color: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        static var orangeWhite: UIColor = StyleKit.mainColor.colorWithHighlight(0.93)
    }

    //// Colors

    public class var mainColor: UIColor { return Cache.mainColor }
    public class var mainColorLight: UIColor { return Cache.mainColorLight }
    public class var color: UIColor { return Cache.color }
    public class var orangeWhite: UIColor { return Cache.orangeWhite }

    //// Drawing Methods

    public class func drawCheckbox(#isChecked: Bool) {

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRectMake(2.5, 2.5, 13, 13), cornerRadius: 3)
        StyleKit.mainColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()


        if (isChecked) {
            //// Rectangle 2 Drawing
            let rectangle2Path = UIBezierPath(roundedRect: CGRectMake(5.5, 5.5, 7, 7), cornerRadius: 1.75)
            StyleKit.mainColor.setFill()
            rectangle2Path.fill()
        }
    }

    //// Generated Images

    public class func imageOfCheckbox(#isChecked: Bool) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSizeMake(16, 16), false, 0)
            StyleKit.drawCheckbox(isChecked: isChecked)

        let imageOfCheckbox = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfCheckbox
    }

}



extension UIColor {
    func colorWithHue(newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func colorWithSaturation(newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func colorWithBrightness(newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func colorWithAlpha(newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, brightness: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func colorWithHighlight(highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func colorWithShadow(shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
